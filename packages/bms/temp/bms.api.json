{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.5",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "bms!",
  "docComment": "",
  "name": "bms",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "bms!",
      "name": "",
      "members": [
        {
          "kind": "Interface",
          "canonicalReference": "bms!BaseTimingAction:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BaseTimingAction "
            }
          ],
          "releaseTag": "Public",
          "name": "BaseTimingAction",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BaseTimingAction#beat:member",
              "docComment": "/**\n * where this action occurs\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "beat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!BMSChart:class",
          "docComment": "/**\n * A BMSChart holds information about a particular BMS notechart. Note that a BMSChart does not contain any information about `#RANDOM`, as they are already processed after compilation.\n *\n * There is not many useful things you can do with a BMSChart other than accessing the header fields and objects inside it.\n *\n * To extract information from a BMSChart, please look at the documentation of higher-level classes, such as {Keysounds}, {Notes}, and {Timing}.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BMSChart "
            }
          ],
          "releaseTag": "Public",
          "name": "BMSChart",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "bms!BMSChart:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BMSChart` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!BMSChart#headers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSHeaders",
                  "canonicalReference": "bms!BMSHeaders:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSChart#measureToBeat:member(1)",
              "docComment": "/**\n * Public: Converts measure number and fraction into beat. A single beat is equivalent to a quarter note in common time signature.\n *\n * @param measure - representing the measure number, starting from 0\n *\n * @param fraction - representing the fraction inside that measure, from 0 to 1\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureToBeat(measure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", fraction: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "measure",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fraction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "measureToBeat"
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!BMSChart#objects:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "objects: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSObjects",
                  "canonicalReference": "bms!BMSObjects:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "objects",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!BMSChart#timeSignatures:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "timeSignatures: "
                },
                {
                  "kind": "Reference",
                  "text": "TimeSignatures",
                  "canonicalReference": "bms!TimeSignatures:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "timeSignatures",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!BMSHeaders:class",
          "docComment": "/**\n * A BMSHeader holds the header information in a BMS file, such as `#TITLE`, `#ARTIST`, or `#BPM`.\n *\n * You get retrieve a header using the `get()` method:\n * ```js\n * chart.headers.get('title')\n * ```\n *\n * For some header fields that may contain multiple values, such as `#SUBTITLE`, you can get them all using `getAll()`:\n * ```js\n * chart.headers.getAll()\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BMSHeaders "
            }
          ],
          "releaseTag": "Public",
          "name": "BMSHeaders",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "bms!BMSHeaders:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BMSHeaders` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSHeaders#each:member(1)",
              "docComment": "/**\n * Iterates through each header field using a callback function.\n *\n * @param callback - will be called for each header field\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "each(callback: "
                },
                {
                  "kind": "Content",
                  "text": "(key: string, value: string) => any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "each"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSHeaders#get:member(1)",
              "docComment": "/**\n * Retrieves the header field’s latest value.\n *\n * @param name - field’s name  @return the field’s latest value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSHeaders#getAll:member(1)",
              "docComment": "/**\n * Retrieves the header field’s values. This is useful when a header field is specified multiple times.\n *\n * @param name - field’s name\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getAll(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string[] | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getAll"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSHeaders#set:member(1)",
              "docComment": "/**\n * Sets the header field’s value.\n *\n * @param name - field’s name\n *\n * @param value - field’s value\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "name",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "set"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!BMSNote:interface",
          "docComment": "/**\n * A single note in a notechart.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BMSNote "
            }
          ],
          "releaseTag": "Public",
          "name": "BMSNote",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSNote#beat:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "beat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSNote#column:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "column?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "column",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSNote#endBeat:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "endBeat?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "endBeat",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSNote#keysound:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keysound: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "keysound",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSNote#keysoundEnd:member",
              "docComment": "/**\n * [bmson] The {Number} of seconds into the sound file to stop playing. This may be `undefined` to indicate that the sound file should play until the end.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keysoundEnd?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keysoundEnd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSNote#keysoundStart:member",
              "docComment": "/**\n * [bmson] The number of seconds into the sound file to start playing\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "keysoundStart?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "keysoundStart",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!BMSObject:interface",
          "docComment": "/**\n * An object inside a {BMSChart}.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BMSObject "
            }
          ],
          "releaseTag": "Public",
          "name": "BMSObject",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSObject#channel:member",
              "docComment": "/**\n * the raw two-character BMS channel of this object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "channel: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "channel",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSObject#fraction:member",
              "docComment": "/**\n * the fractional position inside the measure, ranging from 0 (inclusive) to 1 (exclusive). 0 means that the object is at the start of the measure, whereas 1 means that the object is at the end of the measure.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fraction: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "fraction",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSObject#measure:member",
              "docComment": "/**\n * the measure number, starting at 0 (corresponds to `#000`)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "measure",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BMSObject#value:member",
              "docComment": "/**\n * the raw value of the BMS object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "value: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "value",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!BMSObjects:class",
          "docComment": "/**\n * BMSObjects holds a collection of objects inside a BMS notechart.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BMSObjects "
            }
          ],
          "releaseTag": "Public",
          "name": "BMSObjects",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "bms!BMSObjects:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `BMSObjects` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSObjects#add:member(1)",
              "docComment": "/**\n * Adds a new object to this collection. If an object already exists on the same channel and position, the object is replaced (except for autokeysound tracks).\n *\n * @param object - the object to add\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "add(object: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSObject",
                  "canonicalReference": "bms!BMSObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "object",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "add"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSObjects#all:member(1)",
              "docComment": "/**\n * Returns an array of all objects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "all(): "
                },
                {
                  "kind": "Reference",
                  "text": "BMSObject",
                  "canonicalReference": "bms!BMSObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "all"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!BMSObjects#allSorted:member(1)",
              "docComment": "/**\n * Returns a sorted array of all objects.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "allSorted(): "
                },
                {
                  "kind": "Reference",
                  "text": "BMSObject",
                  "canonicalReference": "bms!BMSObject:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "allSorted"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!BPMTimingAction:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface BPMTimingAction extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTimingAction",
              "canonicalReference": "bms!BaseTimingAction:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "BPMTimingAction",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BPMTimingAction#bpm:member",
              "docComment": "/**\n * BPM to change to\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bpm: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "bpm",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!BPMTimingAction#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'bpm'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "bms!Compiler:namespace",
          "docComment": "",
          "excerptTokens": [],
          "releaseTag": "None",
          "name": "Compiler",
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "bms!Compiler.BMSCompileOptions:interface",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface BMSCompileOptions "
                }
              ],
              "releaseTag": "Public",
              "name": "BMSCompileOptions",
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "bms!Compiler.BMSCompileOptions#format:member",
                  "docComment": "/**\n * File format\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "format: "
                    },
                    {
                      "kind": "Content",
                      "text": "'bms' | 'dtx'"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "format",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "bms!Compiler.BMSCompileOptions#rng:member",
                  "docComment": "/**\n * A function that generates a random number. It is used when processing `#RANDOM n` directive. This function should return an integer number between 1 and `n`.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "rng: "
                    },
                    {
                      "kind": "Content",
                      "text": "(max: number) => number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "rng",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Function",
              "canonicalReference": "bms!Compiler.compile:function(1)",
              "docComment": "/**\n * Reads the string representing the BMS notechart, parses it, and compiles into a {BMSChart}.\n *\n * @param text - the BMS notechart\n *\n * @param options - additional parser options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function compile(text: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "BMSCompileOptions",
                  "canonicalReference": "bms!BMSCompileOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n    headerSentences: number;\n    channelSentences: number;\n    controlSentences: number;\n    skippedSentences: number;\n    malformedSentences: number;\n    chart: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChart",
                  "canonicalReference": "bms!BMSChart:class"
                },
                {
                  "kind": "Content",
                  "text": ";\n    warnings: {\n        lineNumber: number;\n        message: string;\n    }[];\n}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 11
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "text",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 7
                  }
                }
              ],
              "name": "compile"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!ISongInfoData:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ISongInfoData "
            }
          ],
          "releaseTag": "Public",
          "name": "ISongInfoData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ISongInfoData#artist:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "artist: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "artist",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ISongInfoData#difficulty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "difficulty: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "difficulty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ISongInfoData#genre:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "genre: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "genre",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ISongInfoData#level:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "level",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ISongInfoData#subartists:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subartists: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subartists",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ISongInfoData#subtitles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtitles: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subtitles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ISongInfoData#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!Keysounds:class",
          "docComment": "/**\n * A simple mapping between keysounds ID and the file name. ## Example\n *\n * If you have a BMS like this:\n * ```\n * #WAVAA cat.wav\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart}, you can create a {Keysounds} using `fromBMSChart()`:\n * ```js\n * var keysounds = Keysounds.fromBMSChart(bmsChart)\n * ```\n *\n * Then you can retrieve the filename using `.get()`:\n * ```js\n * keysounds.get('aa') // => 'cat.wav'\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Keysounds "
            }
          ],
          "releaseTag": "Public",
          "name": "Keysounds",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "bms!Keysounds#_map:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_map: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [id: string]: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_map",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "bms!Keysounds:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Keysounds` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(map: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [id: string]: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "map",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Keysounds#all:member(1)",
              "docComment": "/**\n * Returns a mapping from keysound ID to keysound filename.\n *\n * **Warning:** This method returns the internal data structure used in this Keysounds object. Do not mutate!\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "all(): "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [id: string]: string;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "all"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Keysounds#files:member(1)",
              "docComment": "/**\n * Returns an array of unique filenames in this Keysounds object.\n *\n * @returns filenames array\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "files(): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "files"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Keysounds.fromBMSChart:member(1)",
              "docComment": "/**\n * Constructs a new {Keysounds} object from a {BMSChart}.\n *\n * @param chart - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromBMSChart(chart: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChart",
                  "canonicalReference": "bms!BMSChart:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Keysounds",
                  "canonicalReference": "bms!Keysounds:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chart",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromBMSChart"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Keysounds#get:member(1)",
              "docComment": "/**\n * Returns the keysound file at the specified ID.\n *\n * @param id - the two-character keysound ID\n *\n * @returns the sound filename\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(id: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "get"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!Notes:class",
          "docComment": "/**\n * A Notes holds the {Note} objects in the game. A note object may or may not be playable.\n *\n * ## Example\n *\n * If you have a BMS like this:\n * ```\n * #00111:AA\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart}, you can create a {Notes} using `fromBMSChart()`:\n * ```js\n * var notes = Notes.fromBMSChart(bmsChart)\n * ```\n *\n * Then you can get all notes using `.all()` method\n * ```js\n * notes.all()\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Notes "
            }
          ],
          "releaseTag": "Public",
          "name": "Notes",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "bms!Notes#_notes:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_notes: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSNote",
                  "canonicalReference": "bms!BMSNote:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_notes",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "bms!Notes:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `Notes` class\n *\n * @param notes - An array of Note objects\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(notes: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSNote",
                  "canonicalReference": "bms!BMSNote:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "notes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Notes#all:member(1)",
              "docComment": "/**\n * Returns an Array of all notes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "all(): "
                },
                {
                  "kind": "Reference",
                  "text": "BMSNote",
                  "canonicalReference": "bms!BMSNote:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "all"
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!Notes.CHANNEL_MAPPING:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static CHANNEL_MAPPING: "
                },
                {
                  "kind": "Content",
                  "text": "typeof ChannelMapping"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "CHANNEL_MAPPING",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": true
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Notes#count:member(1)",
              "docComment": "/**\n * Returns the number of notes in this object, counting both playable and non-playable notes.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "count"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Notes.fromBMSChart:member(1)",
              "docComment": "/**\n * Creates a Notes object from a BMSChart.\n *\n * @param chart - the chart to process\n *\n * @param options - options\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromBMSChart(chart: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChart",
                  "canonicalReference": "bms!BMSChart:class"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChartOptions",
                  "canonicalReference": "bms!~BMSChartOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Notes",
                  "canonicalReference": "bms!Notes:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chart",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "fromBMSChart"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!Positioning:class",
          "docComment": "/**\n * A Positioning represents the relation between song beats and display position, and provides a way to convert between them.\n *\n * In some rhythm games, the amount of scrolling per beat may be different. StepMania’s `#SCROLL` segments is an example.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Positioning "
            }
          ],
          "releaseTag": "Public",
          "name": "Positioning",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "bms!Positioning#_speedcore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_speedcore: "
                },
                {
                  "kind": "Reference",
                  "text": "Speedcore",
                  "canonicalReference": "bms!Speedcore:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_speedcore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "bms!Positioning:constructor(1)",
              "docComment": "/**\n * Constructs a Positioning from the given `segments`.\n *\n * @param segments - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(segments: "
                },
                {
                  "kind": "Reference",
                  "text": "PositioningSegment",
                  "canonicalReference": "bms!PositioningSegment:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "segments",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Positioning.fromBMSChart:member(1)",
              "docComment": "/**\n * Creates a {Positioning} object from the {BMSChart}.\n *\n * @param chart - A {BMSChart} to construct a {Positioning} from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromBMSChart(chart: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChart",
                  "canonicalReference": "bms!BMSChart:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Positioning",
                  "canonicalReference": "bms!Positioning:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chart",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromBMSChart"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Positioning#position:member(1)",
              "docComment": "/**\n * Returns the total elapsed scrolling amount at specified beat.\n *\n * @param beat - the beat number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "position(beat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "beat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "position"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Positioning#speed:member(1)",
              "docComment": "/**\n * Returns the scrolling speed at specified beat.\n *\n * @param beat - the beat number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "speed(beat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "beat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "speed"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!PositioningSegment:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PositioningSegment extends "
            },
            {
              "kind": "Reference",
              "text": "SpeedSegment",
              "canonicalReference": "bms!SpeedSegment:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PositioningSegment",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!PositioningSegment#dx:member",
              "docComment": "/**\n * the amount of scrolling per beat\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dx",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!PositioningSegment#inclusive:member",
              "docComment": "/**\n * whether or not to include the starting beat `t` as part of the segment\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inclusive: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "inclusive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!PositioningSegment#t:member",
              "docComment": "/**\n * the beat number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "t: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "t",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!PositioningSegment#x:member",
              "docComment": "/**\n * the total elapsed amount of scrolling at beat `t`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "bms!ReadCallback:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ReadCallback = "
            },
            {
              "kind": "Content",
              "text": "(error: "
            },
            {
              "kind": "Reference",
              "text": "Error",
              "canonicalReference": "!Error:interface"
            },
            {
              "kind": "Content",
              "text": " | null, value?: string) => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ReadCallback",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "bms!Reader:namespace",
          "docComment": "",
          "excerptTokens": [],
          "releaseTag": "None",
          "name": "Reader",
          "members": [
            {
              "kind": "Function",
              "canonicalReference": "bms!Reader.getReaderOptionsFromFilename:function(1)",
              "docComment": "/**\n * Given the filename, returns the reader options.\n *\n * @param filename - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function getReaderOptionsFromFilename(filename: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "{\n    forceEncoding: string | undefined;\n}"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "filename",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getReaderOptionsFromFilename"
            },
            {
              "kind": "Function",
              "canonicalReference": "bms!Reader.read:function(1)",
              "docComment": "/**\n * Reads the buffer, detect the character set, and returns the decoded string synchronously.\n *\n * @returns the decoded text\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function read(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReaderOptions",
                  "canonicalReference": "bms!ReaderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ],
              "name": "read"
            },
            {
              "kind": "Function",
              "canonicalReference": "bms!Reader.readAsync:function(1)",
              "docComment": "/**\n * Like `read(buffer)`, but this is the asynchronous version.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function readAsync(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", options: "
                },
                {
                  "kind": "Reference",
                  "text": "ReaderOptions",
                  "canonicalReference": "bms!ReaderOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": " | null"
                },
                {
                  "kind": "Content",
                  "text": ", callback?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadCallback",
                  "canonicalReference": "bms!ReadCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                }
              ],
              "name": "readAsync"
            },
            {
              "kind": "Function",
              "canonicalReference": "bms!Reader.readAsync:function(2)",
              "docComment": "/**\n * Like `read(buffer)`, but this is the asynchronous version.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare function readAsync(buffer: "
                },
                {
                  "kind": "Reference",
                  "text": "Buffer",
                  "canonicalReference": "!Buffer:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback?: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadCallback",
                  "canonicalReference": "bms!ReadCallback:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "buffer",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "readAsync"
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!ReaderOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ReaderOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ReaderOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!ReaderOptions#forceEncoding:member",
              "docComment": "/**\n * Force an encoding.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "forceEncoding?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "forceEncoding",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!SongInfo:class",
          "docComment": "/**\n * A SongInfo represents the song info, such as title, artist, genre.\n *\n * ## Example\n *\n * If you have a BMS like this:\n * ```\n * #TITLE Exargon [HYPER]\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart}, you can create a {SongInfo} using `fromBMSChart()`:\n * ```js\n * var info = SongInfo.fromBMSChart(bmsChart)\n * ```\n *\n * Then you can query the song information by accessing its properties.\n * ```js\n * info.title     // => 'Exargon'\n * info.subtitles // => ['HYPER']\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SongInfo implements "
            },
            {
              "kind": "Reference",
              "text": "ISongInfoData",
              "canonicalReference": "bms!ISongInfoData:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SongInfo",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "bms!SongInfo:constructor(1)",
              "docComment": "/**\n * Constructs a SongInfo with given data\n *\n * @param info - the properties to set on this new instance\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(info: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        [propertyName: string]: any;\n    }"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "info",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!SongInfo#artist:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "artist: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "artist",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!SongInfo#difficulty:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "difficulty: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "difficulty",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!SongInfo.fromBMSChart:member(1)",
              "docComment": "/**\n * Constructs a new {SongInfo} object from a {BMSChart}.\n *\n * @param chart - A {BMSChart} to construct a {SongInfo} from\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromBMSChart(chart: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChart",
                  "canonicalReference": "bms!BMSChart:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "SongInfo",
                  "canonicalReference": "bms!SongInfo:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chart",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromBMSChart"
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!SongInfo#genre:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "genre: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "genre",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!SongInfo#level:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "level: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "level",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!SongInfo#subartists:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subartists: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subartists",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!SongInfo#subtitles:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "subtitles: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "subtitles",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!SongInfo#title:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "title: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "title",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!Spacing:class",
          "docComment": "/**\n * Public: A Spacing represents the relation between song beats and notes spacing.\n *\n * In some rhythm games, such as Pump It Up!, the speed (note spacing factor) may be adjusted by the notechart. StepMania’s `#SPEED` segments is an example.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Spacing "
            }
          ],
          "releaseTag": "Public",
          "name": "Spacing",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "bms!Spacing:constructor(1)",
              "docComment": "/**\n * Constructs a Spacing from the given `segments`.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(segments: "
                },
                {
                  "kind": "Reference",
                  "text": "SpacingSegment",
                  "canonicalReference": "bms!SpacingSegment:interface"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "segments",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Spacing#factor:member(1)",
              "docComment": "/**\n * Returns the note spacing factor at the specified beat.\n *\n * @param beat - the beat\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "factor(beat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "beat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "factor"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Spacing.fromBMSChart:member(1)",
              "docComment": "/**\n * Creates a {Spacing} object from the {BMSChart}.\n *\n * ## `#SPEED` and `#xxxSP`\n *\n * Speed is defined as keyframes. These keyframes will be linearly interpolated.\n * ```\n * #SPEED01 1.0\n * #SPEED02 2.0\n *\n * #001SP:01010202\n * ```\n *\n * In this example, the note spacing factor will gradually change from 1.0x at beat 1 to 2.0x at beat 2.\n *\n * Returns a {Spacing} object\n *\n * @param chart - the chart\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromBMSChart(chart: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChart",
                  "canonicalReference": "bms!BMSChart:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Spacing",
                  "canonicalReference": "bms!Spacing:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chart",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromBMSChart"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!SpacingSegment:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface SpacingSegment extends "
            },
            {
              "kind": "Reference",
              "text": "SpeedSegment",
              "canonicalReference": "bms!SpeedSegment:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SpacingSegment",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!SpacingSegment#dx:member",
              "docComment": "/**\n * the amount spacing factor change per beat, in order to create a continuous speed change\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dx: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dx",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!SpacingSegment#inclusive:member",
              "docComment": "/**\n * whether or not to include the starting beat `t` as part of the segment\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "inclusive: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "inclusive",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!SpacingSegment#t:member",
              "docComment": "/**\n * the beat number\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "t: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "t",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!SpacingSegment#x:member",
              "docComment": "/**\n * the spacing at beat `t`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "x",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!Speedcore:class",
          "docComment": "/**\n * Speedcore is a small internally-used library. A Speedcore represents a single dimensional keyframed linear motion (as in equation x = f(t)), and is useful when working with BPM changes ({Timing}), note spacing factor ({Spacing}), or scrolling segments ({Positioning}). A Speedcore is constructed from an array of Segments.\n *\n * A {Segment} is defined as `{ t, x, dx }`, such that:\n *\n * * speedcore.x(segment.t) = segment.x * speedcore.t(segment.x) = segment.t * speedcore.x(segment.t + dt) = segment.x + (segment.dx / dt)\n *\n * ## Explanation\n *\n * One way to think of these segments is to think about tempo changes, where:\n *\n * * `t` is the elapsed time (in seconds) since song start. * `x` is the elapsed beat since song start. * `dx` is the amount of `x` increase per `t`. In this case, it has the unit of beats per second.\n *\n * For example, consider a song that starts at 140 BPM. 32 beats later, the tempo changes to 160 BPM. 128 beats later (at beat 160), the tempo reverts to 140 BPM.\n *\n * We can derive three segments:\n *\n * 1. At time 0, we are at beat 0, and moving at 2.333 beats per second. 2. At 13.714s, we are at beat 32, moving at 2.667 beats per second. 3. At 61.714s, we are at beat 160, moving at 2.333 beats per second.\n *\n * This maps out to this data structure:\n * ```js\n * [ [0]: { t:  0.000,  x:   0,  dx: 2.333,  inclusive: true },\n *   [1]: { t: 13.714,  x:  32,  dx: 2.667,  inclusive: true },\n *   [2]: { t: 61.714,  x: 160,  dx: 2.333,  inclusive: true } ]\n * ```\n *\n * With this data, it is possible to find out the value of `x` at any given `t`.\n *\n * For example, to answer the question, “what is the beat number at 30s?” First, we find the segment with maximum value of `t < 30`, and we get the segment `[1]`.\n *\n * We calculate `segment.x + (t - segment.t) * segment.dx`. The result beat number is (32 + (30 - 13.714) * 2.667) = 75.435.\n *\n * We can also perform the reverse calculation in a similar way, by reversing the equation.\n *\n * Interestingly, we can use these segments to represent the effect of both BPM changes and STOP segments in the same array. For example, a 150-BPM song with a 2-beat stop in the 32nd beat can be represented like this:\n * ```js\n * [ [0]: { t:  0.0,  x:  0,  dx: 2.5,  inclusive: true  },\n *   [1]: { t: 12.8,  x: 32,  dx: 0,    inclusive: true  },\n *   [2]: { t: 13.6,  x: 32,  dx: 2.5,  inclusive: false } ]\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Speedcore<S extends "
            },
            {
              "kind": "Reference",
              "text": "SpeedSegment",
              "canonicalReference": "bms!SpeedSegment:interface"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Reference",
              "text": "SpeedSegment",
              "canonicalReference": "bms!SpeedSegment:interface"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "S",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "name": "Speedcore",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "bms!Speedcore#_reached:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_reached(index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", targetFn: "
                },
                {
                  "kind": "Content",
                  "text": "(segment: S) => number"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "targetFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "_reached"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Speedcore#_segmentAt:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_segmentAt(targetFn: "
                },
                {
                  "kind": "Content",
                  "text": "(segment: S) => number"
                },
                {
                  "kind": "Content",
                  "text": ", position: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "S"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "targetFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "position",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "_segmentAt"
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!Speedcore#_segments:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_segments: "
                },
                {
                  "kind": "Content",
                  "text": "S[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_segments",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "bms!Speedcore:constructor(1)",
              "docComment": "/**\n * Constructs a new `Speedcore` from given segments.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(segments: "
                },
                {
                  "kind": "Content",
                  "text": "S[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "segments",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Speedcore#dx:member(1)",
              "docComment": "/**\n * Finds the _dx_, given _t_.\n *\n * @param t - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dx(t: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "t",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "dx"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Speedcore#segmentAtT:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "segmentAtT(t: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "S"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "t",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "segmentAtT"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Speedcore#segmentAtX:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "segmentAtX(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "S"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "segmentAtX"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Speedcore#t:member(1)",
              "docComment": "/**\n * Calculates the _t_, given _x_.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "t(x: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "x",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "t"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Speedcore#x:member(1)",
              "docComment": "/**\n * Calculates the _x_, given _t_.\n *\n * @param t - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "x(t: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "t",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "x"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "bms!StopTimingAction:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface StopTimingAction extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTimingAction",
              "canonicalReference": "bms!BaseTimingAction:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StopTimingAction",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!StopTimingAction#stopBeats:member",
              "docComment": "/**\n * number of beats to stop\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "stopBeats: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "stopBeats",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "bms!StopTimingAction#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "'stop'"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!TimeSignatures:class",
          "docComment": "/**\n * A TimeSignatures is a collection of time signature values index by measure number.\n *\n * The measure number starts from 0. By default, each measure has a measure size of 1 (which represents the common 4/4 time signature)\n *\n * ## Example\n *\n * If you have a BMS like this:\n * ```\n * #00102:0.75\n * #00103:1.25\n * ```\n *\n * Having parsed it using a {Compiler} into a {BMSChart}, you can access the {TimeSignatures} object:\n * ```js\n * var timeSignatures = bmsChart.timeSignatures\n * ```\n *\n * Note that you can also use the constructor to create a {TimeSignatures} from scratch.\n *\n * One of the most useful use case of this class is to convert the measure and fraction into beat number.\n * ```js\n * timeSignatures.measureToBeat(0, 0.000) // =>  0.0\n * timeSignatures.measureToBeat(0, 0.500) // =>  2.0\n * timeSignatures.measureToBeat(1, 0.000) // =>  4.0\n * timeSignatures.measureToBeat(1, 0.500) // =>  5.5\n * timeSignatures.measureToBeat(2, 0.000) // =>  7.0\n * timeSignatures.measureToBeat(2, 0.500) // =>  9.5\n * timeSignatures.measureToBeat(3, 0.000) // => 12.0\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TimeSignatures "
            }
          ],
          "releaseTag": "Public",
          "name": "TimeSignatures",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "bms!TimeSignatures:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `TimeSignatures` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor();"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!TimeSignatures#get:member(1)",
              "docComment": "/**\n * Retrieves the size of a specified measure.\n *\n * @param measure - representing the measure number.\n *\n * @returns the size of the measure. By default, a measure has a size of 1.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get(measure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "measure",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!TimeSignatures#getBeats:member(1)",
              "docComment": "/**\n * Retrieves the number of beats in a specified measure.\n *\n * Since one beat is equivalent to a quarter note in 4/4 time signature, this is equivalent to `(timeSignatures.get(measure) * 4)`.\n *\n * @param measure - representing the measure number.\n *\n * @returns the size of the measure in beats.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getBeats(measure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "measure",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getBeats"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!TimeSignatures#measureToBeat:member(1)",
              "docComment": "/**\n * Converts a measure number and a fraction inside that measure into the beat number.\n *\n * @param measure - the measure number.\n *\n * @param fraction - the fraction of a measure,\n *\n * @returns the number of beats since measure 0.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "measureToBeat(measure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", fraction: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "measure",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "fraction",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "measureToBeat"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!TimeSignatures#set:member(1)",
              "docComment": "/**\n * Sets the size of a specified measure.\n *\n * @param measure - the measure number, starting from 0\n *\n * @param value - the measure size. For example, a size of 1.0 represents a common 4/4 time signature, whereas a size of 0.75 represents the 3/4 or 6/8 time signature.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(measure: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "measure",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "set"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "bms!Timing:class",
          "docComment": "/**\n * A Timing represents the timing information of a musical score. A Timing object provides facilities to synchronize between metric time (seconds) and musical time (beats).\n *\n * A Timing are created from a series of actions:\n *\n * - BPM changes. - STOP action.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Timing "
            }
          ],
          "releaseTag": "Public",
          "name": "Timing",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "bms!Timing#_eventBeats:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_eventBeats: "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_eventBeats",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "bms!Timing#_speedcore:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "_speedcore: "
                },
                {
                  "kind": "Reference",
                  "text": "Speedcore",
                  "canonicalReference": "bms!Speedcore:class"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TimingSegment",
                  "canonicalReference": "bms!~TimingSegment:interface"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "_speedcore",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            },
            {
              "kind": "Constructor",
              "canonicalReference": "bms!Timing:constructor(1)",
              "docComment": "/**\n * Constructs a Timing with an initial BPM and specified actions.\n *\n * Generally, you would use `Timing.fromBMSChart` to create an instance from a BMSChart, but the constructor may also be used in other situations unrelated to the BMS file format. (e.g. bmson package)\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(initialBPM: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", actions: "
                },
                {
                  "kind": "Reference",
                  "text": "TimingAction",
                  "canonicalReference": "bms!TimingAction:type"
                },
                {
                  "kind": "Content",
                  "text": "[]"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "initialBPM",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "actions",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Timing#beatToSeconds:member(1)",
              "docComment": "/**\n * Convert the given beat into seconds.\n *\n * @param beat - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beatToSeconds(beat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "beat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "beatToSeconds"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Timing#bpmAtBeat:member(1)",
              "docComment": "/**\n * Returns the BPM at the specified beat.\n *\n * @param beat - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "bpmAtBeat(beat: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "beat",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "bpmAtBeat"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Timing.fromBMSChart:member(1)",
              "docComment": "/**\n * Creates a Timing instance from a BMSChart.\n *\n * @param chart - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "static fromBMSChart(chart: "
                },
                {
                  "kind": "Reference",
                  "text": "BMSChart",
                  "canonicalReference": "bms!BMSChart:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Timing",
                  "canonicalReference": "bms!Timing:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": true,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "chart",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromBMSChart"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Timing#getEventBeats:member(1)",
              "docComment": "/**\n * Returns an array representing the beats where there are events.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEventBeats(): "
                },
                {
                  "kind": "Content",
                  "text": "number[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getEventBeats"
            },
            {
              "kind": "Method",
              "canonicalReference": "bms!Timing#secondsToBeat:member(1)",
              "docComment": "/**\n * Convert the given second into beats.\n *\n * @param seconds - \n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "secondsToBeat(seconds: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "seconds",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "secondsToBeat"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "bms!TimingAction:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TimingAction = "
            },
            {
              "kind": "Reference",
              "text": "BPMTimingAction",
              "canonicalReference": "bms!BPMTimingAction:interface"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "StopTimingAction",
              "canonicalReference": "bms!StopTimingAction:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TimingAction",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        }
      ]
    }
  ]
}
